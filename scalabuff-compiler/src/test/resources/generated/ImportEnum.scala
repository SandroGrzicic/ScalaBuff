// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: import_enum.proto

package resources.generated

//import "enum_to_import.proto"

final case class AnImportEnumMessage (
	`toImport`: resources.generated.nested.AnEnumToImport.EnumVal = resources.generated.nested.AnEnumToImport._UNINITIALIZED
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[AnImportEnumMessage]
	with net.sandrogrzicic.scalabuff.Parser[AnImportEnumMessage] {



	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeEnum(1, `toImport`)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeEnumSize(1, `toImport`)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): AnImportEnumMessage = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __toImport: resources.generated.nested.AnEnumToImport.EnumVal = resources.generated.nested.AnEnumToImport._UNINITIALIZED

		def __newMerged = AnImportEnumMessage(
			__toImport
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __toImport = resources.generated.nested.AnEnumToImport.valueOf(in.readEnum())
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: AnImportEnumMessage) = {
		AnImportEnumMessage(
			m.`toImport`
		)
	}

	def getDefaultInstanceForType = AnImportEnumMessage.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"toImport\": ").append("\"").append(`toImport`).append("\"").append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object AnImportEnumMessage {
	@scala.beans.BeanProperty val defaultInstance = new AnImportEnumMessage()

	def parseFrom(data: Array[Byte]): AnImportEnumMessage = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): AnImportEnumMessage = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): AnImportEnumMessage = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): AnImportEnumMessage = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[AnImportEnumMessage] = defaultInstance.mergeDelimitedFromStream(stream)

	val TO_IMPORT_FIELD_NUMBER = 1

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: AnImportEnumMessage) = defaultInstance.mergeFrom(prototype)

}

object ImportEnum {
	def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
	}

	private val fromBinaryHintMap = collection.immutable.HashMap[String, Array[Byte] ⇒ com.google.protobuf.GeneratedMessageLite](
		 "AnImportEnumMessage" -> (bytes ⇒ AnImportEnumMessage.parseFrom(bytes))
	)

	def deserializePayload(payload: Array[Byte], payloadType: String): com.google.protobuf.GeneratedMessageLite = {
		fromBinaryHintMap.get(payloadType) match {
			case Some(f) ⇒ f(payload)
			case None    ⇒ throw new IllegalArgumentException(s"unimplemented deserialization of message payload of type [${payloadType}]")
		}
	}
}

// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: nestedMessages.proto

package resources.generated

final case class TopLevel (
	id_Toplevel: Int = 0
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[TopLevel]
	with net.sandrogrzicic.scalabuff.Parser[TopLevel] {



	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeUInt32(1, id_Toplevel)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeUInt32Size(1, id_Toplevel)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): TopLevel = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __id_Toplevel: Int = 0

		def __newMerged = TopLevel(
			__id_Toplevel
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __id_Toplevel = in.readUInt32()
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: TopLevel) = {
		TopLevel(
			m.id_Toplevel
		)
	}

	def getDefaultInstanceForType = TopLevel.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"id_Toplevel\": ").append("\"").append(`id_Toplevel`).append("\"").append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object TopLevel {
	@scala.beans.BeanProperty val defaultInstance = new TopLevel()

	def parseFrom(data: Array[Byte]): TopLevel = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): TopLevel = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): TopLevel = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): TopLevel = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[TopLevel] = defaultInstance.mergeDelimitedFromStream(stream)

	val ID_TOPLEVEL_FIELD_NUMBER = 1

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: TopLevel) = defaultInstance.mergeFrom(prototype)

	final case class Inner (
		id_Inner: Int = 0
	) extends com.google.protobuf.GeneratedMessageLite
		with com.google.protobuf.MessageLite.Builder
		with net.sandrogrzicic.scalabuff.Message[Inner]
		with net.sandrogrzicic.scalabuff.Parser[Inner] {



		def writeTo(output: com.google.protobuf.CodedOutputStream) {
			output.writeUInt32(1, id_Inner)
		}

		def getSerializedSize = {
			import com.google.protobuf.CodedOutputStream._
			var __size = 0
			__size += computeUInt32Size(1, id_Inner)

			__size
		}

		def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Inner = {
			import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
			var __id_Inner: Int = 0

			def __newMerged = Inner(
				__id_Inner
			)
			while (true) in.readTag match {
				case 0 => return __newMerged
				case 8 => __id_Inner = in.readUInt32()
				case default => if (!in.skipField(default)) return __newMerged
			}
			null
		}

		def mergeFrom(m: Inner) = {
			Inner(
				m.id_Inner
			)
		}

		def getDefaultInstanceForType = Inner.defaultInstance
		def clear = getDefaultInstanceForType
		def isInitialized = true
		def build = this
		def buildPartial = this
		def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
		override def getParserForType = this
		def newBuilderForType = getDefaultInstanceForType
		def toBuilder = this
		def toJson(indent: Int = 0): String = {
			val indent0 = "\n" + ("\t" * indent)
			val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
			val sb = StringBuilder.newBuilder
			sb
				.append("{")
				sb.append(indent1).append("\"id_Inner\": ").append("\"").append(`id_Inner`).append("\"").append(',')
			if (sb.last.equals(',')) sb.length -= 1
			sb.append(indent0).append("}")
			sb.toString()
		}

	}

	object Inner {
		@scala.beans.BeanProperty val defaultInstance = new Inner()

		def parseFrom(data: Array[Byte]): Inner = defaultInstance.mergeFrom(data)
		def parseFrom(data: Array[Byte], offset: Int, length: Int): Inner = defaultInstance.mergeFrom(data, offset, length)
		def parseFrom(byteString: com.google.protobuf.ByteString): Inner = defaultInstance.mergeFrom(byteString)
		def parseFrom(stream: java.io.InputStream): Inner = defaultInstance.mergeFrom(stream)
		def parseDelimitedFrom(stream: java.io.InputStream): Option[Inner] = defaultInstance.mergeDelimitedFromStream(stream)

		val ID_INNER_FIELD_NUMBER = 1

		def newBuilder = defaultInstance.newBuilderForType
		def newBuilder(prototype: Inner) = defaultInstance.mergeFrom(prototype)

	}
}
final case class Foobar (
	reqFoo: Foobar.Foo = Foobar.Foo.defaultInstance,
	optFoo: Option[Foobar.Foo] = None,
	optBar: Option[Foobar.Bar] = None,
	repFoo: scala.collection.immutable.Seq[Foobar.Foo] = Vector.empty[Foobar.Foo],
	repBar: scala.collection.immutable.Seq[Foobar.Bar] = Vector.empty[Foobar.Bar],
	rep_Foo_Bar: scala.collection.immutable.Seq[Foobar.FooBar] = Vector.empty[Foobar.FooBar],
	top_Level_Req: TopLevel = TopLevel.defaultInstance,
	top_Level_Opt: Option[TopLevel] = None,
	top_Level_Inner_Req: TopLevel.Inner = TopLevel.Inner.defaultInstance
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[Foobar]
	with net.sandrogrzicic.scalabuff.Parser[Foobar] {

	def setOptFoo(_f: Foobar.Foo) = copy(optFoo = Some(_f))
	def setOptBar(_f: Foobar.Bar) = copy(optBar = Some(_f))
	def setRepFoo(_i: Int, _v: Foobar.Foo) = copy(repFoo = repFoo.updated(_i, _v))
	def addRepFoo(_f: Foobar.Foo) = copy(repFoo = repFoo :+ _f)
	def addAllRepFoo(_f: Foobar.Foo*) = copy(repFoo = repFoo ++ _f)
	def addAllRepFoo(_f: TraversableOnce[Foobar.Foo]) = copy(repFoo = repFoo ++ _f)
	def setRepBar(_i: Int, _v: Foobar.Bar) = copy(repBar = repBar.updated(_i, _v))
	def addRepBar(_f: Foobar.Bar) = copy(repBar = repBar :+ _f)
	def addAllRepBar(_f: Foobar.Bar*) = copy(repBar = repBar ++ _f)
	def addAllRepBar(_f: TraversableOnce[Foobar.Bar]) = copy(repBar = repBar ++ _f)
	def setRep_Foo_Bar(_i: Int, _v: Foobar.FooBar) = copy(rep_Foo_Bar = rep_Foo_Bar.updated(_i, _v))
	def addRep_Foo_Bar(_f: Foobar.FooBar) = copy(rep_Foo_Bar = rep_Foo_Bar :+ _f)
	def addAllRep_Foo_Bar(_f: Foobar.FooBar*) = copy(rep_Foo_Bar = rep_Foo_Bar ++ _f)
	def addAllRep_Foo_Bar(_f: TraversableOnce[Foobar.FooBar]) = copy(rep_Foo_Bar = rep_Foo_Bar ++ _f)
	def setTop_Level_Opt(_f: TopLevel) = copy(top_Level_Opt = Some(_f))

	def clearOptFoo = copy(optFoo = None)
	def clearOptBar = copy(optBar = None)
	def clearRepFoo = copy(repFoo = Vector.empty[Foobar.Foo])
	def clearRepBar = copy(repBar = Vector.empty[Foobar.Bar])
	def clearRep_Foo_Bar = copy(rep_Foo_Bar = Vector.empty[Foobar.FooBar])
	def clearTop_Level_Opt = copy(top_Level_Opt = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeMessage(1, reqFoo)
		if (optFoo.isDefined) output.writeMessage(2, optFoo.get)
		if (optBar.isDefined) output.writeMessage(3, optBar.get)
		var index_repFoo = 0
		while (index_repFoo < repFoo.length) {
			output.writeMessage(4, repFoo(index_repFoo))
			index_repFoo += 1
		}
		var index_repBar = 0
		while (index_repBar < repBar.length) {
			output.writeMessage(5, repBar(index_repBar))
			index_repBar += 1
		}
		var index_rep_Foo_Bar = 0
		while (index_rep_Foo_Bar < rep_Foo_Bar.length) {
			output.writeMessage(6, rep_Foo_Bar(index_rep_Foo_Bar))
			index_rep_Foo_Bar += 1
		}
		output.writeMessage(7, top_Level_Req)
		if (top_Level_Opt.isDefined) output.writeMessage(8, top_Level_Opt.get)
		output.writeMessage(9, top_Level_Inner_Req)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeMessageSize(1, reqFoo)
		if (optFoo.isDefined) __size += computeMessageSize(2, optFoo.get)
		if (optBar.isDefined) __size += computeMessageSize(3, optBar.get)
		var index_repFoo = 0
		while (index_repFoo < repFoo.length) {
			__size += computeMessageSize(4, repFoo(index_repFoo))
			index_repFoo += 1
		}
		var index_repBar = 0
		while (index_repBar < repBar.length) {
			__size += computeMessageSize(5, repBar(index_repBar))
			index_repBar += 1
		}
		var index_rep_Foo_Bar = 0
		while (index_rep_Foo_Bar < rep_Foo_Bar.length) {
			__size += computeMessageSize(6, rep_Foo_Bar(index_rep_Foo_Bar))
			index_rep_Foo_Bar += 1
		}
		__size += computeMessageSize(7, top_Level_Req)
		if (top_Level_Opt.isDefined) __size += computeMessageSize(8, top_Level_Opt.get)
		__size += computeMessageSize(9, top_Level_Inner_Req)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Foobar = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __reqFoo: Foobar.Foo = Foobar.Foo.defaultInstance
		var __optFoo: Option[Foobar.Foo] = optFoo
		var __optBar: Option[Foobar.Bar] = optBar
		val __repFoo: scala.collection.mutable.Buffer[Foobar.Foo] = repFoo.toBuffer
		val __repBar: scala.collection.mutable.Buffer[Foobar.Bar] = repBar.toBuffer
		val __rep_Foo_Bar: scala.collection.mutable.Buffer[Foobar.FooBar] = rep_Foo_Bar.toBuffer
		var __top_Level_Req: TopLevel = TopLevel.defaultInstance
		var __top_Level_Opt: Option[TopLevel] = top_Level_Opt
		var __top_Level_Inner_Req: TopLevel.Inner = TopLevel.Inner.defaultInstance

		def __newMerged = Foobar(
			__reqFoo,
			__optFoo,
			__optBar,
			Vector(__repFoo: _*),
			Vector(__repBar: _*),
			Vector(__rep_Foo_Bar: _*),
			__top_Level_Req,
			__top_Level_Opt,
			__top_Level_Inner_Req
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 10 => __reqFoo = readMessage[Foobar.Foo](in, __reqFoo, _emptyRegistry)
			case 18 => __optFoo = Some(readMessage[Foobar.Foo](in, __optFoo.orElse({
				__optFoo = Foobar.Foo.defaultInstance
				__optFoo
			}).get, _emptyRegistry))
			case 26 => __optBar = Some(readMessage[Foobar.Bar](in, __optBar.orElse({
				__optBar = Foobar.Bar.defaultInstance
				__optBar
			}).get, _emptyRegistry))
			case 34 => __repFoo += readMessage[Foobar.Foo](in, Foobar.Foo.defaultInstance, _emptyRegistry)
			case 42 => __repBar += readMessage[Foobar.Bar](in, Foobar.Bar.defaultInstance, _emptyRegistry)
			case 50 => __rep_Foo_Bar += readMessage[Foobar.FooBar](in, Foobar.FooBar.defaultInstance, _emptyRegistry)
			case 58 => __top_Level_Req = readMessage[TopLevel](in, __top_Level_Req, _emptyRegistry)
			case 66 => __top_Level_Opt = Some(readMessage[TopLevel](in, __top_Level_Opt.orElse({
				__top_Level_Opt = TopLevel.defaultInstance
				__top_Level_Opt
			}).get, _emptyRegistry))
			case 74 => __top_Level_Inner_Req = readMessage[TopLevel.Inner](in, __top_Level_Inner_Req, _emptyRegistry)
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: Foobar) = {
		Foobar(
			m.reqFoo,
			m.optFoo.orElse(optFoo),
			m.optBar.orElse(optBar),
			repFoo ++ m.repFoo,
			repBar ++ m.repBar,
			rep_Foo_Bar ++ m.rep_Foo_Bar,
			m.top_Level_Req,
			m.top_Level_Opt.orElse(top_Level_Opt),
			m.top_Level_Inner_Req
		)
	}

	def getDefaultInstanceForType = Foobar.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"reqFoo\": ").append(`reqFoo`.toJson(indent + 1)).append(',')
			if (`optFoo`.isDefined) { sb.append(indent1).append("\"optFoo\": ").append(`optFoo`.get.toJson(indent + 1)).append(',') }
			if (`optBar`.isDefined) { sb.append(indent1).append("\"optBar\": ").append(`optBar`.get.toJson(indent + 1)).append(',') }
			sb.append(indent1).append("\"repFoo\": [").append(indent2).append(`repFoo`.map(_.toJson(indent + 1)).mkString(", " + indent2)).append(indent1).append(']').append(',')
			sb.append(indent1).append("\"repBar\": [").append(indent2).append(`repBar`.map(_.toJson(indent + 1)).mkString(", " + indent2)).append(indent1).append(']').append(',')
			sb.append(indent1).append("\"rep_Foo_Bar\": [").append(indent2).append(`rep_Foo_Bar`.map(_.toJson(indent + 1)).mkString(", " + indent2)).append(indent1).append(']').append(',')
			sb.append(indent1).append("\"top_Level_Req\": ").append(`top_Level_Req`.toJson(indent + 1)).append(',')
			if (`top_Level_Opt`.isDefined) { sb.append(indent1).append("\"top_Level_Opt\": ").append(`top_Level_Opt`.get.toJson(indent + 1)).append(',') }
			sb.append(indent1).append("\"top_Level_Inner_Req\": ").append(`top_Level_Inner_Req`.toJson(indent + 1)).append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object Foobar {
	@scala.beans.BeanProperty val defaultInstance = new Foobar()

	def parseFrom(data: Array[Byte]): Foobar = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): Foobar = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): Foobar = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): Foobar = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[Foobar] = defaultInstance.mergeDelimitedFromStream(stream)

	val REQFOO_FIELD_NUMBER = 1
	val OPTFOO_FIELD_NUMBER = 2
	val OPTBAR_FIELD_NUMBER = 3
	val REPFOO_FIELD_NUMBER = 4
	val REPBAR_FIELD_NUMBER = 5
	val REP_FOO_BAR_FIELD_NUMBER = 6
	val TOP_LEVEL_REQ_FIELD_NUMBER = 7
	val TOP_LEVEL_OPT_FIELD_NUMBER = 8
	val TOP_LEVEL_INNER_REQ_FIELD_NUMBER = 9

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: Foobar) = defaultInstance.mergeFrom(prototype)

	final case class Foo (
		id: Option[Long] = None
	) extends com.google.protobuf.GeneratedMessageLite
		with com.google.protobuf.MessageLite.Builder
		with net.sandrogrzicic.scalabuff.Message[Foo]
		with net.sandrogrzicic.scalabuff.Parser[Foo] {

		def setId(_f: Long) = copy(id = Some(_f))

		def clearId = copy(id = None)

		def writeTo(output: com.google.protobuf.CodedOutputStream) {
			if (id.isDefined) output.writeUInt64(1, id.get)
		}

		def getSerializedSize = {
			import com.google.protobuf.CodedOutputStream._
			var __size = 0
			if (id.isDefined) __size += computeUInt64Size(1, id.get)

			__size
		}

		def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Foo = {
			import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
			var __id: Option[Long] = id

			def __newMerged = Foo(
				__id
			)
			while (true) in.readTag match {
				case 0 => return __newMerged
				case 8 => __id = Some(in.readUInt64())
				case default => if (!in.skipField(default)) return __newMerged
			}
			null
		}

		def mergeFrom(m: Foo) = {
			Foo(
				m.id.orElse(id)
			)
		}

		def getDefaultInstanceForType = Foo.defaultInstance
		def clear = getDefaultInstanceForType
		def isInitialized = true
		def build = this
		def buildPartial = this
		def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
		override def getParserForType = this
		def newBuilderForType = getDefaultInstanceForType
		def toBuilder = this
		def toJson(indent: Int = 0): String = {
			val indent0 = "\n" + ("\t" * indent)
			val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
			val sb = StringBuilder.newBuilder
			sb
				.append("{")
				if (`id`.isDefined) { sb.append(indent1).append("\"id\": ").append("\"").append(`id`.get).append("\"").append(',') }
			if (sb.last.equals(',')) sb.length -= 1
			sb.append(indent0).append("}")
			sb.toString()
		}

	}

	object Foo {
		@scala.beans.BeanProperty val defaultInstance = new Foo()

		def parseFrom(data: Array[Byte]): Foo = defaultInstance.mergeFrom(data)
		def parseFrom(data: Array[Byte], offset: Int, length: Int): Foo = defaultInstance.mergeFrom(data, offset, length)
		def parseFrom(byteString: com.google.protobuf.ByteString): Foo = defaultInstance.mergeFrom(byteString)
		def parseFrom(stream: java.io.InputStream): Foo = defaultInstance.mergeFrom(stream)
		def parseDelimitedFrom(stream: java.io.InputStream): Option[Foo] = defaultInstance.mergeDelimitedFromStream(stream)

		val ID_FIELD_NUMBER = 1

		def newBuilder = defaultInstance.newBuilderForType
		def newBuilder(prototype: Foo) = defaultInstance.mergeFrom(prototype)

	}
	final case class Bar (
		id: Option[Long] = None
	) extends com.google.protobuf.GeneratedMessageLite
		with com.google.protobuf.MessageLite.Builder
		with net.sandrogrzicic.scalabuff.Message[Bar]
		with net.sandrogrzicic.scalabuff.Parser[Bar] {

		def setId(_f: Long) = copy(id = Some(_f))

		def clearId = copy(id = None)

		def writeTo(output: com.google.protobuf.CodedOutputStream) {
			if (id.isDefined) output.writeUInt64(1, id.get)
		}

		def getSerializedSize = {
			import com.google.protobuf.CodedOutputStream._
			var __size = 0
			if (id.isDefined) __size += computeUInt64Size(1, id.get)

			__size
		}

		def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): Bar = {
			import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
			var __id: Option[Long] = id

			def __newMerged = Bar(
				__id
			)
			while (true) in.readTag match {
				case 0 => return __newMerged
				case 8 => __id = Some(in.readUInt64())
				case default => if (!in.skipField(default)) return __newMerged
			}
			null
		}

		def mergeFrom(m: Bar) = {
			Bar(
				m.id.orElse(id)
			)
		}

		def getDefaultInstanceForType = Bar.defaultInstance
		def clear = getDefaultInstanceForType
		def isInitialized = true
		def build = this
		def buildPartial = this
		def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
		override def getParserForType = this
		def newBuilderForType = getDefaultInstanceForType
		def toBuilder = this
		def toJson(indent: Int = 0): String = {
			val indent0 = "\n" + ("\t" * indent)
			val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
			val sb = StringBuilder.newBuilder
			sb
				.append("{")
				if (`id`.isDefined) { sb.append(indent1).append("\"id\": ").append("\"").append(`id`.get).append("\"").append(',') }
			if (sb.last.equals(',')) sb.length -= 1
			sb.append(indent0).append("}")
			sb.toString()
		}

	}

	object Bar {
		@scala.beans.BeanProperty val defaultInstance = new Bar()

		def parseFrom(data: Array[Byte]): Bar = defaultInstance.mergeFrom(data)
		def parseFrom(data: Array[Byte], offset: Int, length: Int): Bar = defaultInstance.mergeFrom(data, offset, length)
		def parseFrom(byteString: com.google.protobuf.ByteString): Bar = defaultInstance.mergeFrom(byteString)
		def parseFrom(stream: java.io.InputStream): Bar = defaultInstance.mergeFrom(stream)
		def parseDelimitedFrom(stream: java.io.InputStream): Option[Bar] = defaultInstance.mergeDelimitedFromStream(stream)

		val ID_FIELD_NUMBER = 1

		def newBuilder = defaultInstance.newBuilderForType
		def newBuilder(prototype: Bar) = defaultInstance.mergeFrom(prototype)

	}
	final case class FooBar (
		id: Option[Long] = None
	) extends com.google.protobuf.GeneratedMessageLite
		with com.google.protobuf.MessageLite.Builder
		with net.sandrogrzicic.scalabuff.Message[FooBar]
		with net.sandrogrzicic.scalabuff.Parser[FooBar] {

		def setId(_f: Long) = copy(id = Some(_f))

		def clearId = copy(id = None)

		def writeTo(output: com.google.protobuf.CodedOutputStream) {
			if (id.isDefined) output.writeUInt64(1, id.get)
		}

		def getSerializedSize = {
			import com.google.protobuf.CodedOutputStream._
			var __size = 0
			if (id.isDefined) __size += computeUInt64Size(1, id.get)

			__size
		}

		def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): FooBar = {
			import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
			var __id: Option[Long] = id

			def __newMerged = FooBar(
				__id
			)
			while (true) in.readTag match {
				case 0 => return __newMerged
				case 8 => __id = Some(in.readUInt64())
				case default => if (!in.skipField(default)) return __newMerged
			}
			null
		}

		def mergeFrom(m: FooBar) = {
			FooBar(
				m.id.orElse(id)
			)
		}

		def getDefaultInstanceForType = FooBar.defaultInstance
		def clear = getDefaultInstanceForType
		def isInitialized = true
		def build = this
		def buildPartial = this
		def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
		override def getParserForType = this
		def newBuilderForType = getDefaultInstanceForType
		def toBuilder = this
		def toJson(indent: Int = 0): String = {
			val indent0 = "\n" + ("\t" * indent)
			val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
			val sb = StringBuilder.newBuilder
			sb
				.append("{")
				if (`id`.isDefined) { sb.append(indent1).append("\"id\": ").append("\"").append(`id`.get).append("\"").append(',') }
			if (sb.last.equals(',')) sb.length -= 1
			sb.append(indent0).append("}")
			sb.toString()
		}

	}

	object FooBar {
		@scala.beans.BeanProperty val defaultInstance = new FooBar()

		def parseFrom(data: Array[Byte]): FooBar = defaultInstance.mergeFrom(data)
		def parseFrom(data: Array[Byte], offset: Int, length: Int): FooBar = defaultInstance.mergeFrom(data, offset, length)
		def parseFrom(byteString: com.google.protobuf.ByteString): FooBar = defaultInstance.mergeFrom(byteString)
		def parseFrom(stream: java.io.InputStream): FooBar = defaultInstance.mergeFrom(stream)
		def parseDelimitedFrom(stream: java.io.InputStream): Option[FooBar] = defaultInstance.mergeDelimitedFromStream(stream)

		val ID_FIELD_NUMBER = 1

		def newBuilder = defaultInstance.newBuilderForType
		def newBuilder(prototype: FooBar) = defaultInstance.mergeFrom(prototype)

	}
}

object NestedMessages {
	def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
	}

	private val fromBinaryHintMap = collection.immutable.HashMap[String, Array[Byte] ⇒ com.google.protobuf.GeneratedMessageLite](
		 "TopLevel" -> (bytes ⇒ TopLevel.parseFrom(bytes)),
		 "Foobar" -> (bytes ⇒ Foobar.parseFrom(bytes))
	)

	def deserializePayload(payload: Array[Byte], payloadType: String): com.google.protobuf.GeneratedMessageLite = {
		fromBinaryHintMap.get(payloadType) match {
			case Some(f) ⇒ f(payload)
			case None    ⇒ throw new IllegalArgumentException(s"unimplemented deserialization of message payload of type [${payloadType}]")
		}
	}
}

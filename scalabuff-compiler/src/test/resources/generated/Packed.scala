// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: packed.proto

package resources.generated

final case class PackedTest (
	required_Field: Int = 0,
	optional_Field: Option[Float] = None,
	repeated_Packed_Field: scala.collection.immutable.Seq[Int] = Vector.empty[Int]
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[PackedTest]
	with net.sandrogrzicic.scalabuff.Parser[PackedTest] {

	def setOptional_Field(_f: Float) = copy(optional_Field = Some(_f))
	def setRepeated_Packed_Field(_i: Int, _v: Int) = copy(repeated_Packed_Field = repeated_Packed_Field.updated(_i, _v))
	def addRepeated_Packed_Field(_f: Int) = copy(repeated_Packed_Field = repeated_Packed_Field :+ _f)
	def addAllRepeated_Packed_Field(_f: Int*) = copy(repeated_Packed_Field = repeated_Packed_Field ++ _f)
	def addAllRepeated_Packed_Field(_f: TraversableOnce[Int]) = copy(repeated_Packed_Field = repeated_Packed_Field ++ _f)

	def clearOptional_Field = copy(optional_Field = None)
	def clearRepeated_Packed_Field = copy(repeated_Packed_Field = Vector.empty[Int])

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeInt32(1, required_Field)
		if (optional_Field.isDefined) output.writeFloat(2, optional_Field.get)
		// write field repeated_packed_field packed 
		if (!repeated_Packed_Field.isEmpty) {
			import com.google.protobuf.CodedOutputStream._
			val dataSize = repeated_Packed_Field.map(computeInt32SizeNoTag(_)).sum 
			output.writeRawVarint32(26)
			output.writeRawVarint32(dataSize)
			var index_repeated_Packed_Field = 0
			while (index_repeated_Packed_Field < repeated_Packed_Field.length) {
				output.writeInt32NoTag(repeated_Packed_Field(index_repeated_Packed_Field))
				index_repeated_Packed_Field += 1
			}
		}
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeInt32Size(1, required_Field)
		if (optional_Field.isDefined) __size += computeFloatSize(2, optional_Field.get)
		if (!repeated_Packed_Field.isEmpty) {
			val dataSize = repeated_Packed_Field.map(computeInt32SizeNoTag(_)).sum 
			__size += 1 + computeInt32SizeNoTag(dataSize) + dataSize
		}

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): PackedTest = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __required_Field: Int = 0
		var __optional_Field: Option[Float] = optional_Field
		val __repeated_Packed_Field: scala.collection.mutable.Buffer[Int] = repeated_Packed_Field.toBuffer

		def __newMerged = PackedTest(
			__required_Field,
			__optional_Field,
			Vector(__repeated_Packed_Field: _*)
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __required_Field = in.readInt32()
			case 21 => __optional_Field = Some(in.readFloat())
			case 24 => __repeated_Packed_Field += in.readInt32()
			case 26 => 
				val length = in.readRawVarint32()
				val limit = in.pushLimit(length)
				while (in.getBytesUntilLimit() > 0) {
					__repeated_Packed_Field += in.readInt32()
				}
				in.popLimit(limit)
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: PackedTest) = {
		PackedTest(
			m.required_Field,
			m.optional_Field.orElse(optional_Field),
			repeated_Packed_Field ++ m.repeated_Packed_Field
		)
	}

	def getDefaultInstanceForType = PackedTest.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"required_Field\": ").append("\"").append(`required_Field`).append("\"").append(',')
			if (`optional_Field`.isDefined) { sb.append(indent1).append("\"optional_Field\": ").append("\"").append(`optional_Field`.get).append("\"").append(',') }
			sb.append(indent1).append("\"repeated_Packed_Field\": [").append(indent2).append(`repeated_Packed_Field`.map("\"" + _ + "\"").mkString(", " + indent2)).append(indent1).append(']').append(',')
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object PackedTest {
	@scala.beans.BeanProperty val defaultInstance = new PackedTest()

	def parseFrom(data: Array[Byte]): PackedTest = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): PackedTest = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): PackedTest = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): PackedTest = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[PackedTest] = defaultInstance.mergeDelimitedFromStream(stream)

	val REQUIRED_FIELD_FIELD_NUMBER = 1
	val OPTIONAL_FIELD_FIELD_NUMBER = 2
	val REPEATED_PACKED_FIELD_FIELD_NUMBER = 3

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: PackedTest) = defaultInstance.mergeFrom(prototype)

}

object Packed {
	def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
	}

	private val fromBinaryHintMap = collection.immutable.HashMap[String, Array[Byte] ⇒ com.google.protobuf.GeneratedMessageLite](
		 "PackedTest" -> (bytes ⇒ PackedTest.parseFrom(bytes))
	)

	def deserializePayload(payload: Array[Byte], payloadType: String): com.google.protobuf.GeneratedMessageLite = {
		fromBinaryHintMap.get(payloadType) match {
			case Some(f) ⇒ f(payload)
			case None    ⇒ throw new IllegalArgumentException(s"unimplemented deserialization of message payload of type [${payloadType}]")
		}
	}
}

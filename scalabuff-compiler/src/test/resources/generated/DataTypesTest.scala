// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: dataTypes.proto

package resources.generated

final case class DataTypes (
	varint1: Int = 0,
	varint2: Option[Long] = None,
	varint3: Option[Int] = None,
	varint4: Long = 0L,
	varint5: Option[Int] = None,
	varint6: Option[Long] = None,
	varint7: Option[Boolean] = None,
	f64bit1: Option[Long] = None,
	f64bit2: Option[Long] = None,
	f64bit3: Option[Double] = None,
	length_Delim1: Option[String] = None,
	length_Delim2: Option[com.google.protobuf.ByteString] = None,
	length_Delim3: Option[DataTypes.Varint8Enum.EnumVal] = None,
	length_Delim4: scala.collection.immutable.Seq[Int] = Vector.empty[Int],
	length_Delim5: scala.collection.immutable.Seq[Int] = Vector.empty[Int],
	f32bit1: Option[Int] = None,
	f32bit2: Option[Int] = None,
	f32bit3: Option[Float] = None
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[DataTypes]
	with net.sandrogrzicic.scalabuff.Parser[DataTypes] {

	def setVarint2(_f: Long) = copy(varint2 = Some(_f))
	def setVarint3(_f: Int) = copy(varint3 = Some(_f))
	def setVarint5(_f: Int) = copy(varint5 = Some(_f))
	def setVarint6(_f: Long) = copy(varint6 = Some(_f))
	def setVarint7(_f: Boolean) = copy(varint7 = Some(_f))
	def setF64bit1(_f: Long) = copy(f64bit1 = Some(_f))
	def setF64bit2(_f: Long) = copy(f64bit2 = Some(_f))
	def setF64bit3(_f: Double) = copy(f64bit3 = Some(_f))
	def setLength_Delim1(_f: String) = copy(length_Delim1 = Some(_f))
	def setLength_Delim2(_f: com.google.protobuf.ByteString) = copy(length_Delim2 = Some(_f))
	def setLength_Delim3(_f: DataTypes.Varint8Enum.EnumVal) = copy(length_Delim3 = Some(_f))
	def setLength_Delim4(_i: Int, _v: Int) = copy(length_Delim4 = length_Delim4.updated(_i, _v))
	def addLength_Delim4(_f: Int) = copy(length_Delim4 = length_Delim4 :+ _f)
	def addAllLength_Delim4(_f: Int*) = copy(length_Delim4 = length_Delim4 ++ _f)
	def addAllLength_Delim4(_f: TraversableOnce[Int]) = copy(length_Delim4 = length_Delim4 ++ _f)
	def setLength_Delim5(_i: Int, _v: Int) = copy(length_Delim5 = length_Delim5.updated(_i, _v))
	def addLength_Delim5(_f: Int) = copy(length_Delim5 = length_Delim5 :+ _f)
	def addAllLength_Delim5(_f: Int*) = copy(length_Delim5 = length_Delim5 ++ _f)
	def addAllLength_Delim5(_f: TraversableOnce[Int]) = copy(length_Delim5 = length_Delim5 ++ _f)
	def setF32bit1(_f: Int) = copy(f32bit1 = Some(_f))
	def setF32bit2(_f: Int) = copy(f32bit2 = Some(_f))
	def setF32bit3(_f: Float) = copy(f32bit3 = Some(_f))

	def clearVarint2 = copy(varint2 = None)
	def clearVarint3 = copy(varint3 = None)
	def clearVarint5 = copy(varint5 = None)
	def clearVarint6 = copy(varint6 = None)
	def clearVarint7 = copy(varint7 = None)
	def clearF64bit1 = copy(f64bit1 = None)
	def clearF64bit2 = copy(f64bit2 = None)
	def clearF64bit3 = copy(f64bit3 = None)
	def clearLength_Delim1 = copy(length_Delim1 = None)
	def clearLength_Delim2 = copy(length_Delim2 = None)
	def clearLength_Delim3 = copy(length_Delim3 = None)
	def clearLength_Delim4 = copy(length_Delim4 = Vector.empty[Int])
	def clearLength_Delim5 = copy(length_Delim5 = Vector.empty[Int])
	def clearF32bit1 = copy(f32bit1 = None)
	def clearF32bit2 = copy(f32bit2 = None)
	def clearF32bit3 = copy(f32bit3 = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeInt32(1, varint1)
		if (varint2.isDefined) output.writeInt64(2, varint2.get)
		if (varint3.isDefined) output.writeUInt32(3, varint3.get)
		output.writeUInt64(4, varint4)
		if (varint5.isDefined) output.writeSInt32(5, varint5.get)
		if (varint6.isDefined) output.writeSInt64(6, varint6.get)
		if (varint7.isDefined) output.writeBool(7, varint7.get)
		if (f64bit1.isDefined) output.writeFixed64(100, f64bit1.get)
		if (f64bit2.isDefined) output.writeSFixed64(101, f64bit2.get)
		if (f64bit3.isDefined) output.writeDouble(102, f64bit3.get)
		if (length_Delim1.isDefined) output.writeString(200, length_Delim1.get)
		if (length_Delim2.isDefined) output.writeBytes(201, length_Delim2.get)
		if (length_Delim3.isDefined) output.writeEnum(202, length_Delim3.get)
		var index_length_Delim4 = 0
		while (index_length_Delim4 < length_Delim4.length) {
			output.writeInt32(204, length_Delim4(index_length_Delim4))
			index_length_Delim4 += 1
		}
		// write field length_delim5 packed 
		if (!length_Delim5.isEmpty) {
			import com.google.protobuf.CodedOutputStream._
			val dataSize = length_Delim5.map(computeInt32SizeNoTag(_)).sum 
			output.writeRawVarint32(1626)
			output.writeRawVarint32(dataSize)
			var index_length_Delim5 = 0
			while (index_length_Delim5 < length_Delim5.length) {
				output.writeInt32NoTag(length_Delim5(index_length_Delim5))
				index_length_Delim5 += 1
			}
		}
		if (f32bit1.isDefined) output.writeFixed32(500, f32bit1.get)
		if (f32bit2.isDefined) output.writeSFixed32(501, f32bit2.get)
		if (f32bit3.isDefined) output.writeFloat(502, f32bit3.get)
	}

	def getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var __size = 0
		__size += computeInt32Size(1, varint1)
		if (varint2.isDefined) __size += computeInt64Size(2, varint2.get)
		if (varint3.isDefined) __size += computeUInt32Size(3, varint3.get)
		__size += computeUInt64Size(4, varint4)
		if (varint5.isDefined) __size += computeSInt32Size(5, varint5.get)
		if (varint6.isDefined) __size += computeSInt64Size(6, varint6.get)
		if (varint7.isDefined) __size += computeBoolSize(7, varint7.get)
		if (f64bit1.isDefined) __size += computeFixed64Size(100, f64bit1.get)
		if (f64bit2.isDefined) __size += computeSFixed64Size(101, f64bit2.get)
		if (f64bit3.isDefined) __size += computeDoubleSize(102, f64bit3.get)
		if (length_Delim1.isDefined) __size += computeStringSize(200, length_Delim1.get)
		if (length_Delim2.isDefined) __size += computeBytesSize(201, length_Delim2.get)
		if (length_Delim3.isDefined) __size += computeEnumSize(202, length_Delim3.get)
		var index_length_Delim4 = 0
		while (index_length_Delim4 < length_Delim4.length) {
			__size += computeInt32Size(204, length_Delim4(index_length_Delim4))
			index_length_Delim4 += 1
		}
		if (!length_Delim5.isEmpty) {
			val dataSize = length_Delim5.map(computeInt32SizeNoTag(_)).sum 
			__size += 2 + computeInt32SizeNoTag(dataSize) + dataSize
		}
		if (f32bit1.isDefined) __size += computeFixed32Size(500, f32bit1.get)
		if (f32bit2.isDefined) __size += computeSFixed32Size(501, f32bit2.get)
		if (f32bit3.isDefined) __size += computeFloatSize(502, f32bit3.get)

		__size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): DataTypes = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __varint1: Int = 0
		var __varint2: Option[Long] = varint2
		var __varint3: Option[Int] = varint3
		var __varint4: Long = 0L
		var __varint5: Option[Int] = varint5
		var __varint6: Option[Long] = varint6
		var __varint7: Option[Boolean] = varint7
		var __f64bit1: Option[Long] = f64bit1
		var __f64bit2: Option[Long] = f64bit2
		var __f64bit3: Option[Double] = f64bit3
		var __length_Delim1: Option[String] = length_Delim1
		var __length_Delim2: Option[com.google.protobuf.ByteString] = length_Delim2
		var __length_Delim3: Option[DataTypes.Varint8Enum.EnumVal] = length_Delim3
		val __length_Delim4: scala.collection.mutable.Buffer[Int] = length_Delim4.toBuffer
		val __length_Delim5: scala.collection.mutable.Buffer[Int] = length_Delim5.toBuffer
		var __f32bit1: Option[Int] = f32bit1
		var __f32bit2: Option[Int] = f32bit2
		var __f32bit3: Option[Float] = f32bit3

		def __newMerged = DataTypes(
			__varint1,
			__varint2,
			__varint3,
			__varint4,
			__varint5,
			__varint6,
			__varint7,
			__f64bit1,
			__f64bit2,
			__f64bit3,
			__length_Delim1,
			__length_Delim2,
			__length_Delim3,
			Vector(__length_Delim4: _*),
			Vector(__length_Delim5: _*),
			__f32bit1,
			__f32bit2,
			__f32bit3
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __varint1 = in.readInt32()
			case 16 => __varint2 = Some(in.readInt64())
			case 24 => __varint3 = Some(in.readUInt32())
			case 32 => __varint4 = in.readUInt64()
			case 40 => __varint5 = Some(in.readSInt32())
			case 48 => __varint6 = Some(in.readSInt64())
			case 56 => __varint7 = Some(in.readBool())
			case 801 => __f64bit1 = Some(in.readFixed64())
			case 809 => __f64bit2 = Some(in.readSFixed64())
			case 817 => __f64bit3 = Some(in.readDouble())
			case 1602 => __length_Delim1 = Some(in.readString())
			case 1610 => __length_Delim2 = Some(in.readBytes())
			case 1616 => __length_Delim3 = Some(DataTypes.Varint8Enum.valueOf(in.readEnum()))
			case 1632 => __length_Delim4 += in.readInt32()
			case 1634 => 
				val length = in.readRawVarint32()
				val limit = in.pushLimit(length)
				while (in.getBytesUntilLimit() > 0) {
					__length_Delim4 += in.readInt32()
				}
				in.popLimit(limit)
			case 1624 => __length_Delim5 += in.readInt32()
			case 1626 => 
				val length = in.readRawVarint32()
				val limit = in.pushLimit(length)
				while (in.getBytesUntilLimit() > 0) {
					__length_Delim5 += in.readInt32()
				}
				in.popLimit(limit)
			case 4005 => __f32bit1 = Some(in.readFixed32())
			case 4013 => __f32bit2 = Some(in.readSFixed32())
			case 4021 => __f32bit3 = Some(in.readFloat())
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: DataTypes) = {
		DataTypes(
			m.varint1,
			m.varint2.orElse(varint2),
			m.varint3.orElse(varint3),
			m.varint4,
			m.varint5.orElse(varint5),
			m.varint6.orElse(varint6),
			m.varint7.orElse(varint7),
			m.f64bit1.orElse(f64bit1),
			m.f64bit2.orElse(f64bit2),
			m.f64bit3.orElse(f64bit3),
			m.length_Delim1.orElse(length_Delim1),
			m.length_Delim2.orElse(length_Delim2),
			m.length_Delim3.orElse(length_Delim3),
			length_Delim4 ++ m.length_Delim4,
			length_Delim5 ++ m.length_Delim5,
			m.f32bit1.orElse(f32bit1),
			m.f32bit2.orElse(f32bit2),
			m.f32bit3.orElse(f32bit3)
		)
	}

	def getDefaultInstanceForType = DataTypes.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def parsePartialFrom(cis: com.google.protobuf.CodedInputStream, er: com.google.protobuf.ExtensionRegistryLite) = mergeFrom(cis, er)
	override def getParserForType = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
	def toJson(indent: Int = 0): String = {
		val indent0 = "\n" + ("\t" * indent)
		val (indent1, indent2) = (indent0 + "\t", indent0 + "\t\t")
		val sb = StringBuilder.newBuilder
		sb
			.append("{")
			sb.append(indent1).append("\"varint1\": ").append("\"").append(`varint1`).append("\"").append(',')
			if (`varint2`.isDefined) { sb.append(indent1).append("\"varint2\": ").append("\"").append(`varint2`.get).append("\"").append(',') }
			if (`varint3`.isDefined) { sb.append(indent1).append("\"varint3\": ").append("\"").append(`varint3`.get).append("\"").append(',') }
			sb.append(indent1).append("\"varint4\": ").append("\"").append(`varint4`).append("\"").append(',')
			if (`varint5`.isDefined) { sb.append(indent1).append("\"varint5\": ").append("\"").append(`varint5`.get).append("\"").append(',') }
			if (`varint6`.isDefined) { sb.append(indent1).append("\"varint6\": ").append("\"").append(`varint6`.get).append("\"").append(',') }
			if (`varint7`.isDefined) { sb.append(indent1).append("\"varint7\": ").append("\"").append(`varint7`.get).append("\"").append(',') }
			if (`f64bit1`.isDefined) { sb.append(indent1).append("\"f64bit1\": ").append("\"").append(`f64bit1`.get).append("\"").append(',') }
			if (`f64bit2`.isDefined) { sb.append(indent1).append("\"f64bit2\": ").append("\"").append(`f64bit2`.get).append("\"").append(',') }
			if (`f64bit3`.isDefined) { sb.append(indent1).append("\"f64bit3\": ").append("\"").append(`f64bit3`.get).append("\"").append(',') }
			if (`length_Delim1`.isDefined) { sb.append(indent1).append("\"length_Delim1\": ").append("\"").append(`length_Delim1`.get).append("\"").append(',') }
			if (`length_Delim2`.isDefined) { sb.append(indent1).append("\"length_Delim2\": ").append("\"").append(`length_Delim2`.get).append("\"").append(',') }
			if (`length_Delim3`.isDefined) { sb.append(indent1).append("\"length_Delim3\": ").append("\"").append(`length_Delim3`.get).append("\"").append(',') }
			sb.append(indent1).append("\"length_Delim4\": [").append(indent2).append(`length_Delim4`.map("\"" + _ + "\"").mkString(", " + indent2)).append(indent1).append(']').append(',')
			sb.append(indent1).append("\"length_Delim5\": [").append(indent2).append(`length_Delim5`.map("\"" + _ + "\"").mkString(", " + indent2)).append(indent1).append(']').append(',')
			if (`f32bit1`.isDefined) { sb.append(indent1).append("\"f32bit1\": ").append("\"").append(`f32bit1`.get).append("\"").append(',') }
			if (`f32bit2`.isDefined) { sb.append(indent1).append("\"f32bit2\": ").append("\"").append(`f32bit2`.get).append("\"").append(',') }
			if (`f32bit3`.isDefined) { sb.append(indent1).append("\"f32bit3\": ").append("\"").append(`f32bit3`.get).append("\"").append(',') }
		if (sb.last.equals(',')) sb.length -= 1
		sb.append(indent0).append("}")
		sb.toString()
	}

}

object DataTypes {
	@scala.beans.BeanProperty val defaultInstance = new DataTypes()

	def parseFrom(data: Array[Byte]): DataTypes = defaultInstance.mergeFrom(data)
	def parseFrom(data: Array[Byte], offset: Int, length: Int): DataTypes = defaultInstance.mergeFrom(data, offset, length)
	def parseFrom(byteString: com.google.protobuf.ByteString): DataTypes = defaultInstance.mergeFrom(byteString)
	def parseFrom(stream: java.io.InputStream): DataTypes = defaultInstance.mergeFrom(stream)
	def parseDelimitedFrom(stream: java.io.InputStream): Option[DataTypes] = defaultInstance.mergeDelimitedFromStream(stream)

	val VARINT1_FIELD_NUMBER = 1
	val VARINT2_FIELD_NUMBER = 2
	val VARINT3_FIELD_NUMBER = 3
	val VARINT4_FIELD_NUMBER = 4
	val VARINT5_FIELD_NUMBER = 5
	val VARINT6_FIELD_NUMBER = 6
	val VARINT7_FIELD_NUMBER = 7
	val F64BIT1_FIELD_NUMBER = 100
	val F64BIT2_FIELD_NUMBER = 101
	val F64BIT3_FIELD_NUMBER = 102
	val LENGTH_DELIM1_FIELD_NUMBER = 200
	val LENGTH_DELIM2_FIELD_NUMBER = 201
	val LENGTH_DELIM3_FIELD_NUMBER = 202
	val LENGTH_DELIM4_FIELD_NUMBER = 204
	val LENGTH_DELIM5_FIELD_NUMBER = 203
	val F32BIT1_FIELD_NUMBER = 500
	val F32BIT2_FIELD_NUMBER = 501
	val F32BIT3_FIELD_NUMBER = 502

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: DataTypes) = defaultInstance.mergeFrom(prototype)

	object Varint8Enum extends net.sandrogrzicic.scalabuff.Enum {
		sealed trait EnumVal extends Value
		val _UNINITIALIZED = new EnumVal { val name = "UNINITIALIZED ENUM VALUE"; val id = -1 }

		val ENUM_ZERO = new EnumVal { val name = "ENUM_ZERO"; val id = 0 }
		val ENUM_ONE = new EnumVal { val name = "ENUM_ONE"; val id = 1 }

		val ENUM_ZERO_VALUE = 0
		val ENUM_ONE_VALUE = 1

		def valueOf(id: Int) = id match {
			case 0 => ENUM_ZERO
			case 1 => ENUM_ONE
			case _default => throw new net.sandrogrzicic.scalabuff.UnknownEnumException(_default)
		}
		val internalGetValueMap = new com.google.protobuf.Internal.EnumLiteMap[EnumVal] {
			def findValueByNumber(id: Int): EnumVal = valueOf(id)
		}
	}

}

object DataTypesTest {
	def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
	}

	private val fromBinaryHintMap = collection.immutable.HashMap[String, Array[Byte] ⇒ com.google.protobuf.GeneratedMessageLite](
		 "DataTypes" -> (bytes ⇒ DataTypes.parseFrom(bytes))
	)

	def deserializePayload(payload: Array[Byte], payloadType: String): com.google.protobuf.GeneratedMessageLite = {
		fromBinaryHintMap.get(payloadType) match {
			case Some(f) ⇒ f(payload)
			case None    ⇒ throw new IllegalArgumentException(s"unimplemented deserialization of message payload of type [${payloadType}]")
		}
	}
}

// Generated by ScalaBuff, the Scala Protocol Buffers compiler. DO NOT EDIT!
// source: simple.proto

package resources.generated

final case class SimpleTest (
	`requiredField`: Int = 0,
	`optionalField`: Option[Float] = None,
	`repeatedField`: collection.immutable.Seq[String] = Vector.empty[String],
	`type`: Option[Int] = Some(100),
	`int32Default`: Option[Int] = Some(100),
	`int32Negative`: Option[Int] = Some(-1),
	`stringDefault`: Option[String] = Some("somestring"),
	`floatDefault`: Option[Float] = Some(1.0f),
	`floatNegative`: Option[Float] = Some(-1.0f)
) extends com.google.protobuf.GeneratedMessageLite
	with com.google.protobuf.MessageLite.Builder
	with net.sandrogrzicic.scalabuff.Message[SimpleTest] {

	def setOptionalField(_f: Float) = copy(`optionalField` = _f)
	def setRepeatedField(_i: Int, _v: String) = copy(`repeatedField` = `repeatedField`.updated(_i, _v))
	def addRepeatedField(_f: String) = copy(`repeatedField` = `repeatedField` :+ _f)
	def addAllRepeatedField(_f: String*) = copy(`repeatedField` = `repeatedField` ++ _f)
	def addAllRepeatedField(_f: TraversableOnce[String]) = copy(`repeatedField` = `repeatedField` ++ _f)
	def setType(_f: Int) = copy(`type` = _f)
	def setInt32Default(_f: Int) = copy(`int32Default` = _f)
	def setInt32Negative(_f: Int) = copy(`int32Negative` = _f)
	def setStringDefault(_f: String) = copy(`stringDefault` = _f)
	def setFloatDefault(_f: Float) = copy(`floatDefault` = _f)
	def setFloatNegative(_f: Float) = copy(`floatNegative` = _f)

	def clearOptionalField = copy(`optionalField` = None)
	def clearRepeatedField = copy(`repeatedField` = Vector.empty[String])
	def clearType = copy(`type` = None)
	def clearInt32Default = copy(`int32Default` = None)
	def clearInt32Negative = copy(`int32Negative` = None)
	def clearStringDefault = copy(`stringDefault` = None)
	def clearFloatDefault = copy(`floatDefault` = None)
	def clearFloatNegative = copy(`floatNegative` = None)

	def writeTo(output: com.google.protobuf.CodedOutputStream) {
		output.writeInt32(1, `requiredField`)
		if (`optionalField`.isDefined) output.writeFloat(2, `optionalField`.get)
		for (_v <- `repeatedField`) output.writeString(3, _v)
		if (`type`.isDefined) output.writeInt32(4, `type`.get)
		if (`int32Default`.isDefined) output.writeInt32(5, `int32Default`.get)
		if (`int32Negative`.isDefined) output.writeInt32(6, `int32Negative`.get)
		if (`stringDefault`.isDefined) output.writeString(7, `stringDefault`.get)
		if (`floatDefault`.isDefined) output.writeFloat(8, `floatDefault`.get)
		if (`floatNegative`.isDefined) output.writeFloat(9, `floatNegative`.get)
	}

	lazy val getSerializedSize = {
		import com.google.protobuf.CodedOutputStream._
		var size = 0
		size += computeInt32Size(1, `requiredField`)
		if (`optionalField`.isDefined) size += computeFloatSize(2, `optionalField`.get)
		for (_v <- `repeatedField`) size += computeStringSize(3, _v)
		if (`type`.isDefined) size += computeInt32Size(4, `type`.get)
		if (`int32Default`.isDefined) size += computeInt32Size(5, `int32Default`.get)
		if (`int32Negative`.isDefined) size += computeInt32Size(6, `int32Negative`.get)
		if (`stringDefault`.isDefined) size += computeStringSize(7, `stringDefault`.get)
		if (`floatDefault`.isDefined) size += computeFloatSize(8, `floatDefault`.get)
		if (`floatNegative`.isDefined) size += computeFloatSize(9, `floatNegative`.get)

		size
	}

	def mergeFrom(in: com.google.protobuf.CodedInputStream, extensionRegistry: com.google.protobuf.ExtensionRegistryLite): SimpleTest = {
		import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
		var __requiredField: Int = 0
		var __optionalField: Option[Float] = `optionalField`
		val __repeatedField: collection.mutable.Buffer[String] = `repeatedField`.toBuffer
		var __type: Option[Int] = `type`
		var __int32Default: Option[Int] = `int32Default`
		var __int32Negative: Option[Int] = `int32Negative`
		var __stringDefault: Option[String] = `stringDefault`
		var __floatDefault: Option[Float] = `floatDefault`
		var __floatNegative: Option[Float] = `floatNegative`

		def __newMerged = SimpleTest(
			__requiredField,
			__optionalField,
			Vector(__repeatedField: _*),
			__type,
			__int32Default,
			__int32Negative,
			__stringDefault,
			__floatDefault,
			__floatNegative
		)
		while (true) in.readTag match {
			case 0 => return __newMerged
			case 8 => __requiredField = in.readInt32()
			case 21 => __optionalField = in.readFloat()
			case 26 => __repeatedField += in.readString()
			case 32 => __type = in.readInt32()
			case 40 => __int32Default = in.readInt32()
			case 48 => __int32Negative = in.readInt32()
			case 58 => __stringDefault = in.readString()
			case 69 => __floatDefault = in.readFloat()
			case 77 => __floatNegative = in.readFloat()
			case default => if (!in.skipField(default)) return __newMerged
		}
		null
	}

	def mergeFrom(m: SimpleTest) = {
		SimpleTest(
			m.`requiredField`,
			m.`optionalField`.orElse(`optionalField`),
			`repeatedField` ++ m.`repeatedField`,
			m.`type`.orElse(`type`),
			m.`int32Default`.orElse(`int32Default`),
			m.`int32Negative`.orElse(`int32Negative`),
			m.`stringDefault`.orElse(`stringDefault`),
			m.`floatDefault`.orElse(`floatDefault`),
			m.`floatNegative`.orElse(`floatNegative`)
		)
	}

	def getDefaultInstanceForType = SimpleTest.defaultInstance
	def clear = getDefaultInstanceForType
	def isInitialized = true
	def build = this
	def buildPartial = this
	def newBuilderForType = getDefaultInstanceForType
	def toBuilder = this
}

object SimpleTest {
	@reflect.BeanProperty val defaultInstance = new SimpleTest()

	val REQUIRED_FIELD_FIELD_NUMBER = 1
	val OPTIONAL_FIELD_FIELD_NUMBER = 2
	val REPEATED_FIELD_FIELD_NUMBER = 3
	val TYPE_FIELD_NUMBER = 4
	val INT32DEFAULT_FIELD_NUMBER = 5
	val INT32NEGATIVE_FIELD_NUMBER = 6
	val STRINGDEFAULT_FIELD_NUMBER = 7
	val FLOATDEFAULT_FIELD_NUMBER = 8
	val FLOATNEGATIVE_FIELD_NUMBER = 9

	def apply(message: Array[Byte]): SimpleTest = defaultInstance.mergeFrom(message)
	def apply(message: com.google.protobuf.ByteString): SimpleTest = defaultInstance.mergeFrom(message)

	def newBuilder = defaultInstance.newBuilderForType
	def newBuilder(prototype: SimpleTest) = defaultInstance.mergeFrom(prototype)

}

object Simple {
	def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
	}

}
